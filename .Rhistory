theme(axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 10)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 20, l = 5)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 0, l = 5)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90))
10
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of NullValues in Variables") +
scale_y_continuous(labels = comma) +
theme(axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of NullValues in Variables") +
scale_y_continuous(labels = comma) +
theme(plot.title=element_text(size=16, hjust = 0.5),
axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = Variable, y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of Null Values in Variables") +
scale_y_continuous(labels = comma) +
theme(plot.title=element_text(size=16, hjust = 0.5),
axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = reorder(Variable, NullValues, sum), y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of Null Values in Variables") +
scale_y_continuous(labels = comma) +
theme(plot.title=element_text(size=16, hjust = 0.5),
axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = reorder(Variable, -NullValues, sum), y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of Null Values in Variables") +
scale_y_continuous(labels = comma) +
theme(plot.title=element_text(size=16, hjust = 0.5),
axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
# Plot Nulls
ggplot(train.isna.bar, aes(x = reorder(Variable, -NullValues, sum), y = NullValues)) +
geom_bar(stat = "identity") +
ggtitle("Count of Null Values in Variables") +
labs(x="Variable", y="NullValues") +
scale_y_continuous(labels = comma) +
theme(plot.title=element_text(size=16, hjust = 0.5),
axis.title.x=element_text(size = 12, margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x  = element_text(angle = 90, vjust = 0.5))
#############################################################################
## Prepare data
#############################################################################
# Replace NA values in data with 0
cols.rep = c("BsmtFullBath", "BsmtUnfSF", "GarageYrBlt", "GarageArea", "GarageCars", "TotalBsmtSF")
train[cols.rep][is.na(train[cols.rep])] = 0
names(train)
#############################################################################
## Prepare data
#############################################################################
# Replace NA values in data with 0
#cols.rep = c("BsmtFullBath", "BsmtUnfSF", "GarageYrBlt", "GarageArea", "GarageCars", "TotalBsmtSF")
cols.rep = names(train.num)
train[cols.rep][is.na(train[cols.rep])] = 0
names(train.num.sum)
# Summary of normality by variable
train.num.sum = psych::describe(train.num, IQR = TRUE); train.num.sum
names(train.num.sum)
train.num.sum[train.num.sum$skew > 1, ]
# Summary of normality by variable
train.num.sum = as.data.frame(psych::describe(train.num, IQR = TRUE)); train.num.sum
train.num.sum[train.num.sum$skew > 1, ]
train.num.sum[train.num.sum$mean > train.num.sum$median, ]
# right-skewed data that can be transformed via log or square root
train.num.sum[(train.num.sum$mean > train.num.sum$median) & abs(train.num.sum$skew) >= 1, ]
# right-skewed data that can be transformed via log or square root
right.skewed = rownames(train.num.sum[(train.num.sum$mean > train.num.sum$median) & abs(train.num.sum$skew) >= 1, ])
cols = right.skewed; cols
colname = col + "_log"
colname = toString(col) + "_log"
#colname = toString(col) + "_log"
print(col)
colname
colname = toString(col) + "_log"
colname = paste(toString(col) + "_log")
assign(toString(col) + "_log", colname)
assign(paste(toString(col),"_log"), colname)
assign(paste(toString(col),"_log", sep = ""), colname)
col
assign(paste(col,"_log", sep = ""), colname)
for (col in cols) {
assign(paste(col,"_log", sep = ""), colname)
}
colname = ""
for (col in cols) {
colname = ""
assign(paste(col,"_log", sep = ""), colname)
}
for (col in cols) {
colname = ""
assign(paste(col,"_log", sep = ""), colname)
colname
}
print(colname)
for (col in cols) {
colname = ""
assign(paste(col,"_log", sep = ""), colname)
print(colname)
}
for (col in cols) {
#colname = ""
assign(paste(col,"_log", sep = ""), colname)
print(colname)
}
print(paste(col,"_log", sep = ""))
for (col in cols) {
#colname = ""
assign(paste(col,"_log", sep = ""), colname)
print(paste(col,"_log", sep = ""))
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
print(colname)
}
names(train)
for (col in cols) {
colname = paste(col,"_log", sep = "")
train$colname = log(train$col)
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
print(colname)
train$colname = log(train$col)
}
print(colname)
print(train$col)
for (col in cols) {
colname = paste(col,"_log", sep = "")
print(colname)
print(train$col)
train$colname = log(train.col)
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
print(colname)
print(train$col)
train$colname = 0
}
names(train)
ncols(train)
ncol(train)
# Read in the training data
train = read.csv("train.csv"); train
#############################################################################
## Quick Summary
#############################################################################
dim(train) #1460 rows and 81 cols
train[1,]
train[,1]
for (col in cols) {
colname = paste(col,"_log", sep = "")
for (i in 1:ncol(train)) {
if (names(train[,i]) == col) {
print(col)
}
}
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
for (i in 1:ncol(train)) {
if (names(train[,i]) = col) {
print(col)
}
}
}
for (col in cols) {
colname = paste(col,"_log", sep = "")
for (i in 1:ncol(train)) {
if (names(train[,i]) = col) {
print(col)
}
else {
print(names(train[,i]))
}
}
}
colnames(train[,1]
colnames(train[,1])
colnames(train[,1])
colnames(train[[1]])
colnames(train[[3]])
train[right.skewed]
train_log = log(train[right.skewed])
names(train_log) = paste(names(train_log), "_log")
name(train_log)
names(train_log)
train_log = log(train[right.skewed])
names(train_log) = paste(names(train_log), "_log", sep = "")
names(train_log)
names(train.cat)
# Read in the training data
train = read.csv("train.csv"); train
#############################################################################
## Separate data into Numerical and Categorical
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% "SalePrice_log"]
train.cat = train[!cols] # not numeric values
names(train.cat)
#############################################################################
## Separate data into Numerical and Categorical
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% "SalePrice_log"]
train.cat = train[!cols] # not numeric values
names(train.cat)
#############################################################################
## Separate data into Categorical
#############################################################################
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% "SalePrice"]
train.cat = train[!cols] # not numeric values
#############################################################################
## Separate data into Numerical and Categorical
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% "SalePrice", "SalePrice_log"]
cols = names(train) %in% cols[!cols %in% c("SalePrice", "SalePrice_log")]
train.cat = train[!cols] # not numeric values
# Bit variables
names(train)
mapply(function(x) if (x > 0) {1} else{0})
mapply(train, function(x) if (x > 0) {1} else{0})
mapply(train$PoolArea, function(x) if (x > 0) {1} else{0})
sapply(train$PoolArea, function(x) if (x > 0) {1} else{0})
sapply(train$X2ndFlrSF, function(x) if (x > 0) {1} else{0})
cbind(train, Has2ndFloor = sapply(train$X2ndFlrSF, function(x) if (x > 0) {1} else{0}))
cbind(train, HasPool = sapply(train$PoolArea, function(x) if (x > 0) {1} else{0}))
cbind(train, HasGarage = sapply(train$GarageArea, function(x) if (x > 0) {1} else{0}))
cbind(train, HasBsmt = sapply(train$TotalBsmtSF, function(x) if (x > 0) {1} else{0}))
cbind(train, HasFireplace = sapply(train$Fireplaces, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasPool = sapply(train$PoolArea, function(x) if (x > 0) {1} else{0}))
train = cbind(train, Has2ndFloor = sapply(train$X2ndFlrSF, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasGarage = sapply(train$GarageArea, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasBsmt = sapply(train$TotalBsmtSF, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasFireplace = sapply(train$Fireplaces, function(x) if (x > 0) {1} else{0}))
# Bit variables
names(train)
#############################################################################
## Create new Variables
#############################################################################
train$YrBltAndRemod = train$YearBuilt + train$YearRemodAdd
train$TotalSF = train$TotalBsmtSF + train$X1stFlrSF + train$X2ndFlrSF
train$TotalSqrFt = (train$BsmtFinSF1 + train$BsmtFinSF2 +
train$X1stFlrSF + train$X2ndFlrSF)
train$TotalPorchSF = (train$OpenPorchSF + train$X3SsnPorch +
train$EnclosedPorch + train$ScreenPorch +
train$WoodDeckSF)
train$TotalBathrooms = (train$FullBath + (0.5 * train$HalfBath) +
train$BsmtFullBath + (0.5 * train$BsmtHalfBath))
# Bit variables
names(train)
train = cbind(train,train_log)
names(train)
# Read in the training data
train = read.csv("train.csv"); train
#############################################################################
## Create new Variables
#############################################################################
train$YrBltAndRemod = train$YearBuilt + train$YearRemodAdd
train$TotalSF = train$TotalBsmtSF + train$X1stFlrSF + train$X2ndFlrSF
train$TotalSqrFt = (train$BsmtFinSF1 + train$BsmtFinSF2 +
train$X1stFlrSF + train$X2ndFlrSF)
train$TotalBathrooms = (train$FullBath + (0.5 * train$HalfBath) +
train$BsmtFullBath + (0.5 * train$BsmtHalfBath))
train$TotalPorchSF = (train$OpenPorchSF + train$X3SsnPorch +
train$EnclosedPorch + train$ScreenPorch +
train$WoodDeckSF)
# Bit variables
train = cbind(train, HasPool = sapply(train$PoolArea, function(x) if (x > 0) {1} else{0}))
train = cbind(train, Has2ndFloor = sapply(train$X2ndFlrSF, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasGarage = sapply(train$GarageArea, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasBsmt = sapply(train$TotalBsmtSF, function(x) if (x > 0) {1} else{0}))
train = cbind(train, HasFireplace = sapply(train$Fireplaces, function(x) if (x > 0) {1} else{0}))
#############################################################################
## Separate data into Numerical and Categorical
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% "SalePrice"]
train.cat = train[!cols] # not numeric values
#############################################################################
## Take a look at skewed data
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
# Summary of normality by numeric variable
train.num.sum = as.data.frame(psych::describe(train.num, IQR = TRUE)); train.num.sum
#############################################################################
## Replace NA value is numeric data
#############################################################################
# Replace NA values in data with 0
#cols.rep = c("BsmtFullBath", "BsmtUnfSF", "GarageYrBlt", "GarageArea", "GarageCars", "TotalBsmtSF")
cols.rep = names(train.num)
train[cols.rep][is.na(train[cols.rep])] = 0
#############################################################################
## Log transform skewed columns
#############################################################################
# right-skewed data that can be transformed via log or square root
right.skewed = rownames(train.num.sum[(train.num.sum$mean > train.num.sum$median) & abs(train.num.sum$skew) >= 1, ])
# left-skewed data
left.skewed = rownames(train.num.sum[(train.num.sum$mean < train.num.sum$median) & abs(train.num.sum$skew) >= 1, ])
# Add logged variables to train data set
train_log = log(train[right.skewed])
names(train_log) = paste(names(train_log), "_log", sep = "")
train = cbind(train,train_log)
names(train.num)
#############################################################################
## Separate data into Numerical and Categorical
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
names(train.num)
cols = colnames(train.num)
cols = names(train) %in% cols[!cols %in% c("SalePrice", "SalePrice_log")]
train.cat = train[!cols] # not numeric values
names(train.cat)
#############################################################################
## Create Dummy Variables for Categorical
#############################################################################
# get dummy variables for each and remove first dummy for colinearity
train.cat.dummy = fastDummies::dummy_cols(train.cat, remove_first_dummy = TRUE)
cols = colnames(train.cat)
# remove all non-dummy columns, but keep SalePrice
cols = names(train.cat.dummy) %in% cols[!cols %in% c("SalePrice", "SalePrice_log")]
train.cat.dummy = train.cat.dummy[!cols] # final dataframe for analysis
names(train.cat.dummy)
# Read in the training data
train = read.csv("train.csv"); train
#############################################################################
## Take a look at skewed data
#############################################################################
train.num = Filter(is.numeric, train) # only numeric variables
names(train.num)
# Summary of normality by numeric variable
train.num.sum = as.data.frame(psych::describe(train.num, IQR = TRUE)); train.num.sum
#############################################################################
## Log transform skewed columns
#############################################################################
# right-skewed data that can be transformed via log or square root
right.skewed = rownames(train.num.sum[(train.num.sum$mean > train.num.sum$median) & abs(train.num.sum$skew) >= 1, ])
# Add logged variables to train data set
train_log = log(train[right.skewed])
names(train_log) = paste(names(train_log), "_log", sep = "")
train = cbind(train, train_log)
# clean up data where there was a log transformation on a column with a value of 0 within it
# GrLivArea_log
train$GrLivArea_log[which(is.nan(train$GrLivArea_log))] = NA
train$GrLivArea_log[which(train$GrLivArea_log == Inf)] = NA
train$GrLivArea_log[which(train$GrLivArea_log == -Inf)] = NA
# TotalBsmtSF_log
train$TotalBsmtSF_log[which(is.nan(train$TotalBsmtSF_log))] = NA
train$TotalBsmtSF_log[which(train$TotalBsmtSF_log == -Inf)] = NA
train$TotalBsmtSF_log[which(train$TotalBsmtSF_log == Inf)] = NA
# BsmtFinSF1_log
train$BsmtFinSF1_log[which(is.nan(train$BsmtFinSF1_log))] = NA
train$BsmtFinSF1_log[which(train$BsmtFinSF1_log == Inf)] = NA
train$BsmtFinSF1_log[which(train$BsmtFinSF1_log == -Inf)] = NA
# WoodDeckSF_log
train$WoodDeckSF_log[which(is.nan(train$WoodDeckSF_log))] = NA
train$WoodDeckSF_log[which(train$WoodDeckSF_log == Inf)] = NA
# X2ndFlrSF_log
train$X2ndFlrSF_log[which(is.nan(train$X2ndFlrSF_log))] = NA
train$WoodDeckSF_log[which(train$WoodDeckSF_log == -Inf)] = NA
train$X2ndFlrSF_log[which(train$X2ndFlrSF_log == Inf)] = NA
train$X2ndFlrSF_log[which(train$X2ndFlrSF_log == -Inf)] = NA
# X2ndFlrSF over GrLivArea_log due to colinearity
model.final.2 = lm(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model.final.2) # adjr2 of 0.8628
#############################################################################
## Correlation - Numerical
#############################################################################
# This will show what variables correlate with SalesPrice
# and what could potentially be colinear if the variables correlate strongly
# with each other
train.num = Filter(is.numeric, train) # only numeric variables
train.num.cor = cor(train.num)
# curious what this shows
cols = names(train.num) %in% c("Id", "SalePrice", "LotArea") # logical to see if included
train.num.notVals = train.num[!cols]
boxplot(train.num.notVals, las=2)
boxplot(train$LotArea, main='LotArea Plot', ylab='LotArea')
# Get subset of numericals without Id
cols = names(train.num) %in% c("Id") # logical to see if included
train.num.notId = train.num[!cols]
# Get absolute value of correlation
df.corr.SalesPrice = sort(abs(df.corr.SalesPrice), decreasing = TRUE)
# DataFrame of just correlation with SalesPrice
df.corr.SalesPrice = data.frame(cor(train.num.notId$SalePrice, train.num.notId))
# Look at top 15 correlated variables
cols = colnames(df.corr.SalesPrice)[0:15] # look at top 15 correlated variables
train.num.sctr = train.num[cols]
# Graph a scatter and correlation matrix together
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 5, face = "bold"),
strip.text.x=element_text(size = 8, face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # dev.off() run this command in case plot sticks
# Visualize Correlation Matrix in Heatmap
corrplot(train.num.cor, method = "color", diag = FALSE) # Display the correlation coefficient
# Visualize Correlation Matrix
p.mat = cor.mtest(train.num)$p
res = cor.mtest(train.num, conf.level = .95)
col = colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(train.num.cor, method = "color", col = col(200),
type = "upper", number.cex = 0.45, tl.cex = 0.6, #order = "AOE",
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
p.mat = p.mat, sig.level = 0.01, insig = "blank",
diag = FALSE)
# Durbin Watson test
durbinWatsonTest(model)
# Colinearity
vif(model) # no colinearity detected
