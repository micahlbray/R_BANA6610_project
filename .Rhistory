panel.grid.minor = element_blank())
colnames(df.corr.SalesPrice)
cols = colnames(df.corr.SalesPrice); cols
cols = colnames(df.corr.SalesPrice); str(cols)
cols = colnames(df.corr.SalesPrice)as.array(); str(cols)
cols = colnames(df.corr.SalesPrice).as.array(); str(cols)
cols = as.array(colnames(df.corr.SalesPrice)); str(cols)
train.num.sctr = train.num[cols]
train.num.sctr
#Plot Living room and Sale Price
ggplot(train, aes(x=train$GrLivArea, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Sale Price ($)") +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme
#Plot Living room and Sale Price
ggplot(train, aes(x=train$GrLivArea, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Sale Price ($)") +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
df.corr.SalesPrice
# Plot Year
ggplot(train, aes(x=train$YearBuilt, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Sale Price ($)") +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme
# Plot Year
ggplot(train, aes(x=train$YearBuilt, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Sale Price ($)") +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
# Plot Year
ggplot(train, aes(x=train$YearBuilt, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Year Built") +
#scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
#Set theme for scatter plots
theme = theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Scatter Plot GrLivArea and Sale Price
ggplot(train, aes(x=train$GrLivArea, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Sale Price ($)") +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
# Scatter Plot YearBuilt and SalePrice
ggplot(train, aes(x=train$YearBuilt, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Living Room Area and Sale Price ($)") +
labs(x="Living Room Area", y="Year Built") +
#scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
plot(train.num.sctr)
colnames(df.corr.SalesPrice)[:5]
colnames(df.corr.SalesPrice)[5]
colnames(df.corr.SalesPrice)[0:5]
colnames(df.corr.SalesPrice)[0:10]
cols = colnames(df.corr.SalesPrice)[0:10]; str(cols)
train.num.sctr = train.num[cols]
plot(train.num.sctr)
# Scatter Plot YearBuilt and SalePrice
ggplot(train, aes(x=train$YearBuilt, y=train$SalePrice)) +
geom_point(shape=1) +     # Use hollow circles
geom_smooth(method=lm) +  # Add linear regression line (by default includes 95% confidence region)
ggtitle("Year Built and Sale Price ($)") +
labs(x="Year Built", y="Year Built") +
#scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar) +
theme()
model = lm(train$SalePrice ~ train[cols], data = train)
train[cols]
# Using GarageArea in lieu of GarageCars. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
# Using TotalBsmtSF in lieu of X1stFlrSF. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
model = lm(SalePrice ~ GrLivArea+GarageArea+TotalBsmtSF+YearBuilt+YearRemodAdd, data = train)
source('C:/Users/mbray/Dropbox/Grad School/CU Denver/BANA_6610/project/project.R', echo=TRUE)
summary(model)
# Using GarageArea in lieu of GarageCars. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
# Using TotalBsmtSF in lieu of X1stFlrSF. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
model = lm(SalePrice ~ GrLivArea+GarageArea+TotalBsmtSF+YearBuilt, data = train)
summary(model)
# Using GarageArea in lieu of GarageCars. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
# Using TotalBsmtSF in lieu of X1stFlrSF. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
model = lm(SalePrice ~ GrLivArea+GarageArea+TotalBsmtSF+YearBuilt+YearRemodAdd, data = train)
summary(model)
model = lm(SalePrice ~ GrLivArea+GarageArea+YearBuilt, data = train)
summary(model)
model = lm(SalePrice ~ GrLivArea, data = train)
summary(model)
# Using GarageCars in lieu of GarageArea. They are highly correlated to each other,
# which means I only needed to utilize one.
# Using TotalBsmtSF in lieu of X1stFlrSF. They are highly correlated to each other,
# which means I only needed to utilize one. I decided to go with the more continuous variable.
model = lm(SalePrice ~ GrLivArea+GarageCars+TotalBsmtSF+YearBuilt+YearRemodAdd, data = train)
summary(model)
library(readxl)
library(ggplot2)
library(dplyr)
library(corrplot)
train = read.csv("train.csv"); train
#############################################################################
## Quick Summary
#############################################################################
dim(train) #1460 rows and 81 cols
colnames(train)
str(train)
summary(train$SalePrice)
qplot(train$SalePrice,
geom="histogram",
#breaks=seq(34000, 755000, by = n),
bins = 15,
main = "Histogram for Sale Price",
xlab = "Sale Price",
ylab = 'Count',
fill=I("black"),
col=I("gray")) +
scale_x_continuous(labels = dollar) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Graph by count
qplot(train$SalePrice,
geom="histogram",
#breaks=seq(34000, 755000, by = n),
bins = 15,
main = "Histogram for Sale Price",
xlab = "Sale Price",
ylab = 'Count',
fill=I("black"),
col=I("gray")) +
scale_x_continuous(labels = dollar) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Graph by count
qplot(train$SalePrice,
geom="histogram",
#breaks=seq(34000, 755000, by = n),
bins = 15,
main = "Histogram for Sale Price",
xlab = "Sale Price",
ylab = 'Count',
fill=I("black"),
col=I("gray")) +
scale_x_continuous(labels = dollars) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
require(scales)
# Graph by count
qplot(train$SalePrice,
geom="histogram",
#breaks=seq(34000, 755000, by = n),
bins = 15,
main = "Histogram for Sale Price",
xlab = "Sale Price",
ylab = 'Count',
fill=I("black"),
col=I("gray")) +
scale_x_continuous(labels = dollars) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Graph by count
qplot(train$SalePrice,
geom="histogram",
#breaks=seq(34000, 755000, by = n),
bins = 15,
main = "Histogram for Sale Price",
xlab = "Sale Price",
ylab = 'Count',
fill=I("black"),
col=I("gray")) +
scale_x_continuous(labels = dollar) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Graph by density
ggplot(data=train, aes(train$SalePrice)) +
geom_histogram(aes(y =..density..),
#breaks=seq(34000, 755000, by = n),
bins=15,
col="gray",
fill="black",
alpha = .8) +
geom_density(fill = "#ff4d4d", alpha = 0.5) +
ggtitle("Density Histogram with Overlay") +
labs(x="Sale Price", y="Density") +
scale_x_continuous(labels = dollar) +
scale_y_continuous(labels = format_format(big.mark = " ", decimal.mark = ".", scientific = FALSE)) +
theme(panel.background = element_rect(fill = '#ffffff'),
plot.title=element_text(size=16, hjust = 0.3),
axis.title.y=element_text(size = 12, vjust = 0.2,
margin = margin(t = 0, r = 20, b = 1, l = 0)),
axis.title.x=element_text(size = 12, vjust = 0.2,
margin = margin(t = 10, r = 0, b = 10, l = 5)),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
psych::describe(train)
#############################################################################
## Explore Outliers and Finalize Data
#############################################################################
#############################################################################
# boxplots to find outliers
boxplot(train)
boxplot(train$LotArea)
boxplot(train$LotArea, main='LotArea Plot', ylab='LotArea')
boxplot(train$Street, main='Street Box Plot', ylab='Street')
#boxplot(train$Street, main='Street Box Plot', ylab='Street')
boxplot(train$LandContour, main='LandContour Box Plot', ylab='LandContour')
boxplot(train$Utilities, main='Utilities Box Plot', ylab='Utilities')
boxplot(train$Street, main='Street Box Plot', ylab='Street')
#boxplot(train$Street, main='Street Box Plot', ylab='Street')
#boxplot(train$Utilities, main='Utilities Box Plot', ylab='Utilities')
boxplot(train$Condition2, main='Age Box Plot', ylab='Age')
ggplot(data=train, aes(x=ski$Street, y=ski$SalePrice)) +
geom_boxplot()
ggplot(data=train, aes(x=train$Street, y=train$SalePrice)) +
geom_boxplot()
ggplot(data=train, aes(x=train$Street, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
boxplot(train$LotArea, main='LotArea Plot', ylab='LotArea')
ggplot(data=train, aes(x=train$Street, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
ggplot(data=train, aes(x=train$Utilities, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
ggplot(data=train, aes(x=train$Condition2, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
ggplot(data=train, aes(x=train$RoofMatl, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
ggplot(data=train, aes(x=train$Heating, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
boxplot(train$LowQualFinSF, main='LowQualFinSF Box Plot', ylab='LowQualFinSF')
ggplot(data=train, aes(x=train$GarageCond, y=train$SalePrice)) +
scale_y_continuous(labels = dollar) +
geom_boxplot()
boxplot(train$X3SsnPorch, main='X3SsnPorch Box Plot', ylab='X3SsnPorch')
boxplot(train$PoolArea, main='PoolArea Box Plot', ylab='PoolArea')
boxplot(train$MiscVal, main='MiscVal Box Plot', ylab='MiscVal')
#############################################################################
## Correlation - Numerical
#############################################################################
# This will show what variables correlate with SalesPrice
# and what could potentially be colinear if the variables correlate strongly
train.num = Filter(is.numeric, train)
train.num.cor = cor(train.num)
# DataFrame of just correlation with SalesPrice
cols = names(train.num) %in% c("SalePrice","Id")
train.num.notSalePrice <- train.num[!cols]
df.corr.SalesPrice = sort(data.frame(cor(train.num$SalePrice,
train.num.notSalePrice)), decreasing = TRUE)
cols = colnames(df.corr.SalesPrice)[0:10]
train.num.sctr = train.num[cols]
plot(train.num.sctr)
plotmatrix(train.num.sctr, colour="gray20")
library(ggplot2)
plotmatrix(train.num.sctr, colour="gray20")
ggpairs(train.num.sctr, colour="gray20")
install.packages("GGally")
ggpairs(train.num.sctr, colour="gray20")
library(GGally)
ggpairs(train.num.sctr, colour="gray20")
train.num = Filter(is.numeric, train)
train.num.cor = cor(train.num)
# DataFrame of just correlation with SalesPrice
cols = names(train.num) %in% c("SalePrice","Id")
train.num.notSalePrice <- train.num[!cols]
df.corr.SalesPrice = sort(data.frame(cor(train.num$SalePrice,
train.num.notSalePrice)), decreasing = TRUE)
cols = colnames(df.corr.SalesPrice)#[0:10]
train.num.sctr = train.num[cols]
plot(train.num.sctr)
ggpairs(train.num.sctr, colour="gray20")
ggpairs(train.num.sctr)
dev.off()
ggpairs(train.num.sctr)
model = lm(train$SalePrice ~ ., data=train)
summary(model)
#############################################################################
## Exploring MODELs
#############################################################################
model = lm(train$SalePrice ~ ., data=train)
#############################################################################
## Exploring MODELs
#############################################################################
model = lm(train$SalePrice ~ ., data=train)
l <- sapply(train, function(x) is.factor(x))
m <- train[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
psych::describe(train)
str(train)
#############################################################################
## Exploring MODELs
#############################################################################
model = lm(train$SalePrice ~ ., data=train)
colnames(train.num.sctr)
# DataFrame of just correlation with SalesPrice
cols = names(train.num) %in% c("Id")
train.num.notSalePrice <- train.num[!cols]
df.corr.SalesPrice = sort(data.frame(cor(train.num$SalePrice,
train.num.notSalePrice)), decreasing = TRUE)
cols = colnames(df.corr.SalesPrice)#[0:10]
train.num.sctr = train.num[cols]
colnames(train.num.sctr)
cols = colnames(df.corr.SalesPrice)[0:10]
train.num.sctr = train.num[cols]
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 9))) # dev.off() run this command in case plot sticks
cols = colnames(df.corr.SalesPrice)[0:15]
train.num.sctr = train.num[cols]
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 7))) # dev.off() run this command in case plot sticks
dev.off()
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 7))) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4))) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.3),
axis.text.y=element_text(size = 7),
axis.text.x=element_text(size = 7)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.3),
axis.text.y=element_text(size = 5),
axis.text.x=element_text(size = 7)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 7, vjust = 0.2),
axis.title.x=element_text(size = 7, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7)) # dev.off() run this command in case plot sticks
train = read.csv("train.csv"); train
#############################################################################
## Correlation - Numerical
#############################################################################
# This will show what variables correlate with SalesPrice
# and what could potentially be colinear if the variables correlate strongly
train.num = Filter(is.numeric, train)
train.num.cor = cor(train.num)
# DataFrame of just correlation with SalesPrice
cols = names(train.num) %in% c("Id")
train.num.notSalePrice <- train.num[!cols]
df.corr.SalesPrice = sort(data.frame(cor(train.num$SalePrice,
train.num.notSalePrice)), decreasing = TRUE)
cols = colnames(df.corr.SalesPrice)[0:15]
train.num.sctr = train.num[cols]
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text=element_text(size = 7)) # dev.off() run this command in case plot sticks
library(ggplot2)
library(GGally)
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text=element_text(size = 7)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 6)
strip.text.x=element_text(size = 8)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 6),
strip.text.x=element_text(size = 8)) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 5, face = "bold"),
strip.text.x=element_text(size = 8, face = "bold")) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4, face = "bold")),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 5, face = "bold"),
strip.text.x=element_text(size = 8, face = "bold")) # dev.off() run this command in case plot sticks
ggpairs(train.num.sctr,
upper = list(continuous = wrap("cor", size = 4)),
title = "Scatter Matrix") +
theme(plot.title=element_text(size=10, hjust = 0.5),
axis.title.y=element_text(size = 5, vjust = 0.2),
axis.title.x=element_text(size = 5, vjust = 0.2),
axis.text.y=element_text(size = 6),
axis.text.x=element_text(size = 7),
strip.text.y=element_text(size = 5, face = "bold"),
strip.text.x=element_text(size = 8, face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # dev.off() run this command in case plot sticks
