train_Control = trainControl(method = "cv", number = 10, savePredictions = TRUE) # number of folds
# Model 1.3 from Model 1
model.model1 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+Fireplaces+
BsmtFinSF1+LotArea+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 2 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Summarise Results
print(model.model1)
model.model1$results
print(model.model2)
model.model2$results
# Model 1.3 from Model 1
model.model1 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+Fireplaces+
BsmtFinSF1+LotArea+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 2 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Summarise Results
print(model.model1)
model.model1$results
print(model.model2)
model.model2$results
# Model 2 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
print(model.model2)
model.model2$results
train.bestglm = bestglm(Xy = train.subs,
family = gaussian,
IC = "AIC", # Information criteria for
method = "exhaustive")
# Best models
train.bestglm$BestModels
# Summary of best model
summary(train.bestglm$BestModel)
summary(model2.1) # adjr2 of 0.8542
RSS = c(crossprod(model2.1$residuals))
MSE = RSS / length(model2.1$residuals)
RMSE = sqrt(MSE)
RMSE = sqrt(MSE); RMSE
# Model 2.1 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
print(model.model2)
model.model2$results
# Model 1.3 from Model 1
model.model1 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+Fireplaces+
BsmtFinSF1+LotArea+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Summarise Results
print(model.model1)
model.model1$results
# Model 2.1 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
print(model.model2)
model.model2$results
leaps.sum.df
print(leaps.sum.df)
write.csv(leaps.sum.df,
"C:/Users/mbray/Dropbox/Grad School/CU Denver/BANA_6610/project/subset.csv",
row.names = FALSE)
# Model 3
model3 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
# Model 3
model3 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3) # adjr2 of 0.8551
model3.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3.1) # adjr2 of 0.8637
# Model 3
model3 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3) # adjr2 of 0.8637
model3.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3.1) # adjr2 of 0.8637
RSS = c(crossprod(model3.1$residuals))
MSE = RSS / length(model3.1$residuals)
RMSE = sqrt(MSE); RMSE
# Model 4
model4 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
TotRmsAbvGrd+Fireplaces+BsmtFinSF1+WoodDeckSF+X2ndFlrSF+
HalfBath+LotArea+BsmtFullBath+BsmtUnfSF+BedroomAbvGr+
KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea+X3SsnPorch,
data = train)
summary(model4) # adjr2 of 0.8637
# Model 4
model4 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
TotRmsAbvGrd+Fireplaces+BsmtFinSF1+WoodDeckSF+X2ndFlrSF+
HalfBath+LotArea+BsmtFullBath+BsmtUnfSF+BedroomAbvGr+
KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea+X3SsnPorch,
data = train)
summary(model4) # adjr2 of 0.8637
model4.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+FullBath+YearBuilt+YearRemodAdd+
Fireplaces+BsmtFinSF1+WoodDeckSF+X2ndFlrSF+
HalfBath+LotArea+BsmtFullBath+BsmtUnfSF+BedroomAbvGr+
KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea+X3SsnPorch,
data = train)
summary(model4.1) # adjr2 of 0.8637
model4.2 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+
LotArea+BsmtFullBath+
KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model4.2) # adjr2 of 0.8638
model4.2 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model4.2) # adjr2 of 0.862
model3.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3.1) # adjr2 of 0.8637
# Model 3.1 from Model 3
model.model3 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train,
"lm",
trControl = train_Control)
print(model.model3)
model.model3$results
model3.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model3.1) # adjr2 of 0.8637
RSS = c(crossprod(model3.1$residuals))
MSE = RSS / length(model3.1$residuals)
RMSE = sqrt(MSE); RMSE
# Model 3.1 from Model 3
model.model3 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train,
"lm",
trControl = train_Control)
print(model.model3)
model.model3$results
# Model 1.3 from Model 1
model.model1 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+Fireplaces+
BsmtFinSF1+LotArea+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 2.1 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 3.1 from Model 3
model.model3 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train,
"lm",
trControl = train_Control)
# Summarise Results
print(model.model1)
model.model1$results
print(model.model2)
model.model2$results
print(model.model3)
# Model 1.3 from Model 1
model.model1 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
YearBuilt+YearRemodAdd+Fireplaces+
BsmtFinSF1+LotArea+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 2.1 from Model 2
model.model2 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+YearBuilt+YearRemodAdd+
Fireplaces+LotArea+BsmtUnfSF+MSSubClass,
data = train,
"lm",
trControl = train_Control)
# Model 3.1 from Model 3
model.model3 = train(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train,
"lm",
trControl = train_Control)
# Summarise Results
#print(model.model1)
model.model1$results
#print(model.model2)
model.model2$results
#print(model.model3)
model.model3$results
#############################################################################
## Validate the Model assumptions
# Model
model = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model)
# Residual plot
plot(train$SalePrice, model$residuals, xlab = 'Sale Price', ylab='Residuals', main ='Residual Plot')
abline(h = 0, col = 'red')
# Plot of Actual vs Predicted
plot(predict(model), train$SalePrice, xlab = "Predicted", ylab = "Actual", main ='Residual vs Actual Plot')
abline(a = 0, b = 1, col = 'red')
# Normal probability plot of residuals
qqnorm(model$residuals)
qqline(model$residuals, col = "red") #fails because it is not a straight line
# Durbin Watson test
durbinWatsonTest(model)
# Colinearity
vif(model) # no colinearity detected
RSS = c(crossprod(model$residuals))
MSE = RSS / length(model$residuals)
RMSE = sqrt(MSE); RMSE
# Removing GrLivArea_log due to colinearity
model = lm(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model)
RSS = c(crossprod(model$residuals))
MSE = RSS / length(model$residuals)
RMSE = sqrt(MSE); RMSE
# Residual plot
plot(train$SalePrice, model$residuals, xlab = 'Sale Price', ylab='Residuals', main ='Residual Plot')
abline(h = 0, col = 'red')
# Plot of Actual vs Predicted
plot(predict(model), train$SalePrice, xlab = "Predicted", ylab = "Actual", main ='Residual vs Actual Plot')
abline(a = 0, b = 1, col = 'red')
# Normal probability plot of residuals
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
# Durbin Watson test
durbinWatsonTest(model)
# Colinearity
vif(model) # no colinearity detected
# GrLivArea_log over X2ndFlrSF due to colinearity
model = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model)
RSS = c(crossprod(model$residuals))
MSE = RSS / length(model$residuals)
RMSE = sqrt(MSE); RMSE
# Colinearity
vif(model) # no colinearity detected
# X2ndFlrSF over GrLivArea_log due to colinearity
model = lm(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model)
# GrLivArea_log over X2ndFlrSF due to colinearity
model = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model)
#############################################################################
## Validate the Model assumptions
# Model
model = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model) # adjr2 of 0.8616
# Check the RMSE
RSS = c(crossprod(model$residuals))
# X2ndFlrSF over GrLivArea_log due to colinearity
model = lm(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model) # adjr2 of 0.8628
# Check the RMSE
RSS = c(crossprod(model$residuals))
MSE = RSS / length(model$residuals)
RMSE = sqrt(MSE); RMSE
# Check the RMSE
RSS = c(crossprod(model.final.2$residuals))
MSE = RSS / length(model.final.2$residuals)
#############################################################################
## Validate the Model assumptions
# Model
model.final.1 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model.final.1) # adjr2 of 0.8637
# X2ndFlrSF over GrLivArea_log due to colinearity
model.final.2 = lm(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model.final.2) # adjr2 of 0.8628
# GrLivArea_log over X2ndFlrSF due to colinearity
model.final.3 = lm(SalePrice_log ~ OverallQual+GrLivArea_log+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
summary(model.final.3) # adjr2 of 0.8616
model = model.final.2
model = model.final.2
# Check the RMSE
RSS = c(crossprod(model$residuals))
MSE = RSS / length(model$residuals)
RMSE = sqrt(MSE); RMSE
# Residual plot
plot(train$SalePrice, model$residuals, xlab = 'Sale Price', ylab='Residuals', main ='Residual Plot')
abline(h = 0, col = 'red')
# Plot of Actual vs Predicted
plot(predict(model), train$SalePrice, xlab = "Predicted", ylab = "Actual", main ='Residual vs Actual Plot')
abline(a = 0, b = 1, col = 'red')
# Normal probability plot of residuals
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
# Durbin Watson test
durbinWatsonTest(model)
# Colinearity
vif(model) # no colinearity detected
# Read in the test data
test = read.csv("test.csv"); test
test$SalePrice_log = log(test$SalePrice) # right-skewed
test$GrLivArea_log = log(test$GrLivArea) # right-skewed
test$X1stFlrSF_log = log(test$X1stFlrSF) # right-skewed
# clean up data where there was a log transformation on a column with a value of 0 within it
# GrLivArea_log
test$GrLivArea_log[which(is.nan(test$GrLivArea_log))] = NA
test$GrLivArea_log[which(test$GrLivArea_log == Inf)] = NA
test$GrLivArea_log[which(test$GrLivArea_log == -Inf)] = NA
# verify the errors were removed
psych::describe(test$SalePrice_log)
psych::describe(test$GrLivArea_log)
# Read in the test data
test = read.csv("test.csv"); test
test$SalePrice_log = log(test$SalePrice) # right-skewed
test$GrLivArea_log = log(test$GrLivArea) # right-skewed
test$X1stFlrSF_log = log(test$X1stFlrSF) # right-skewed
# Model 4 from Model 3.1 without GrLivArea_log
model.model4 = train(SalePrice_log ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train,
"lm",
trControl = train_Control)
#print(model.model4)
model.model4$results
model = lm(log(SalePrice) ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
pred = predict(model, test)
summary(pred)
summary(pred$SalePrice)
prediction = predict(model, test)
output = cbind(test, prediction)
output
prediction = predict(model, test); prediction
prediction = 1/log(predict(model, test)); prediction
prediction = exp(predict(model, test)); prediction
output = cbind(test, prediction)
output = cbind(test, prediction); output
output = cbind(test, SalePrice = prediction); output
output[, c("Id","SalePrice")]
submission = output[, c("Id","SalePrice")]
write.csv(submission,
"C:/Users/mbray/Dropbox/Grad School/CU Denver/BANA_6610/project/submission1.csv",
row.names = FALSE)
prediction[662, ]
prediction[662]
prediction[660:664]
prediction = predict(model, test)
prediction[660:664]
train[660:664]
test[660:664]
test[660:664, ]
x[cols.rep][is.na(x[cols.rep])] = 0
cols.rep = c("BsmtFullBath", "BsmtUnfSF", "TotalBsmtSF")
x[cols.rep][is.na(x[cols.rep])] = 0
model = lm(log(SalePrice) ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
prediction = predict(model, test)
prediction[660:664]
# Replace NA values in data with 0
cols.rep = c("BsmtFullBath", "BsmtUnfSF", "TotalBsmtSF")
test[cols.rep][is.na(test[cols.rep])] = 0
model = lm(log(SalePrice) ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
prediction = predict(model, test)
prediction[660:664]
prediction = exp(predict(model, test)); prediction
#prediction[660:664]
#test[660:664, ]
output = cbind(test, SalePrice = prediction); output
submission = output[, c("Id","SalePrice")]
write.csv(submission,
"C:/Users/mbray/Dropbox/Grad School/CU Denver/BANA_6610/project/submission2.csv",
row.names = FALSE)
prediction = predict(model, test)
prediction[1115:1120]
test[1115:1120, ]
# Replace NA values in data with 0
cols.rep = c("BsmtFullBath", "BsmtUnfSF", "TotalBsmtSF", "GarageCars")
test[cols.rep][is.na(test[cols.rep])] = 0
model = lm(log(SalePrice) ~ OverallQual+GarageCars+
TotalBsmtSF+X1stFlrSF_log+YearBuilt+YearRemodAdd+
Fireplaces+WoodDeckSF+X2ndFlrSF+LotArea+BsmtFullBath+
BsmtUnfSF+KitchenAbvGr+ScreenPorch+MSSubClass+PoolArea,
data = train)
prediction = exp(predict(model, test)); prediction
#prediction = predict(model, test)
#prediction[1115:1120]
#test[1115:1120, ]
output = cbind(test, SalePrice = prediction); output
submission = output[, c("Id","SalePrice")]
write.csv(submission,
"C:/Users/mbray/Dropbox/Grad School/CU Denver/BANA_6610/project/submission3.csv",
row.names = FALSE)
# Residual plot
plot(train$SalePrice_log, model$residuals, xlab = 'Sale Price', ylab='Residuals', main ='Residual Plot')
# Residual plot
plot(train$SalePrice_log, model$residuals, xlab = 'Sale Price', ylab='Residuals', main ='Residual Plot')
abline(h = 0, col = 'red')
# Plot of Actual vs Predicted
plot(predict(model), train$SalePrice_log, xlab = "Predicted", ylab = "Actual", main ='Residual vs Actual Plot')
abline(a = 0, b = 1, col = 'red')
